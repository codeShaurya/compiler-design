Grammar

    0 $accept: line $end

    1 line: E ln

    2 E: E plus E
    3  | E minus E
    4  | E mul E
    5  | E divide E
    6  | op E cl
    7  | minus E
    8  | id


Terminals, with rules where they appear

$end (0) 0
error (256)
id (258) 8
plus (259) 2
minus (260) 3 7
mul (261) 4
divide (262) 5
op (263) 6
cl (264) 6
ln (265) 1


Nonterminals, with rules where they appear

$accept (11)
    on left: 0
line (12)
    on left: 1, on right: 0
E (13)
    on left: 2 3 4 5 6 7 8, on right: 1 2 3 4 5 6 7


State 0

    0 $accept: . line $end

    id     shift, and go to state 1
    minus  shift, and go to state 2
    op     shift, and go to state 3

    line  go to state 4
    E     go to state 5


State 1

    8 E: id .

    $default  reduce using rule 8 (E)


State 2

    7 E: minus . E

    id     shift, and go to state 1
    minus  shift, and go to state 2
    op     shift, and go to state 3

    E  go to state 6


State 3

    6 E: op . E cl

    id     shift, and go to state 1
    minus  shift, and go to state 2
    op     shift, and go to state 3

    E  go to state 7


State 4

    0 $accept: line . $end

    $end  shift, and go to state 8


State 5

    1 line: E . ln
    2 E: E . plus E
    3  | E . minus E
    4  | E . mul E
    5  | E . divide E

    plus    shift, and go to state 9
    minus   shift, and go to state 10
    mul     shift, and go to state 11
    divide  shift, and go to state 12
    ln      shift, and go to state 13


State 6

    2 E: E . plus E
    3  | E . minus E
    4  | E . mul E
    5  | E . divide E
    7  | minus E .

    mul     shift, and go to state 11
    divide  shift, and go to state 12

    $default  reduce using rule 7 (E)


State 7

    2 E: E . plus E
    3  | E . minus E
    4  | E . mul E
    5  | E . divide E
    6  | op E . cl

    plus    shift, and go to state 9
    minus   shift, and go to state 10
    mul     shift, and go to state 11
    divide  shift, and go to state 12
    cl      shift, and go to state 14


State 8

    0 $accept: line $end .

    $default  accept


State 9

    2 E: E plus . E

    id     shift, and go to state 1
    minus  shift, and go to state 2
    op     shift, and go to state 3

    E  go to state 15


State 10

    3 E: E minus . E

    id     shift, and go to state 1
    minus  shift, and go to state 2
    op     shift, and go to state 3

    E  go to state 16


State 11

    4 E: E mul . E

    id     shift, and go to state 1
    minus  shift, and go to state 2
    op     shift, and go to state 3

    E  go to state 17


State 12

    5 E: E divide . E

    id     shift, and go to state 1
    minus  shift, and go to state 2
    op     shift, and go to state 3

    E  go to state 18


State 13

    1 line: E ln .

    $default  reduce using rule 1 (line)


State 14

    6 E: op E cl .

    $default  reduce using rule 6 (E)


State 15

    2 E: E . plus E
    2  | E plus E .
    3  | E . minus E
    4  | E . mul E
    5  | E . divide E

    mul     shift, and go to state 11
    divide  shift, and go to state 12

    $default  reduce using rule 2 (E)


State 16

    2 E: E . plus E
    3  | E . minus E
    3  | E minus E .
    4  | E . mul E
    5  | E . divide E

    mul     shift, and go to state 11
    divide  shift, and go to state 12

    $default  reduce using rule 3 (E)


State 17

    2 E: E . plus E
    3  | E . minus E
    4  | E . mul E
    4  | E mul E .
    5  | E . divide E

    $default  reduce using rule 4 (E)


State 18

    2 E: E . plus E
    3  | E . minus E
    4  | E . mul E
    5  | E . divide E
    5  | E divide E .

    $default  reduce using rule 5 (E)
